#+title Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle init.el

* packages
** straight
   #+begin_src emacs-lisp
     ;; instructions from the straight README
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name
	     "straight/repos/straight.el/bootstrap.el"
	     (or (bound-and-true-p straight-base-dir)
		 user-emacs-directory)))
	   (bootstrap-version 7))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

     (setq straight-use-package-by-default t)
     (straight-use-package 'use-package)
   #+end_src
** dired (deactivated)

   # With two dired-buffer copy will by default guess that we
   # want to copy to the other buffer.
   # #+begin_src emacs-lisp
   #   (defun ms/dired-mode-setup()
   #     (setq dired-dwim-target t))
   #   (add-hook 'dired-mode-hook 'ms/dired-mode-setup)
   # #+end_src
   
** evil (vim-keys)

   #+begin_src emacs-lisp
     (use-package evil
       :init
       ;; needed by evil-collection
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       :config
       ;; otherwise SPC SPC will not bring up M-x if for instance
       ;; a region is highlighted
       (define-key evil-motion-state-map " " nil)
       (evil-mode 1))

     ;; need to also have movement keys hjkl in some other packages like magit
     (use-package evil-collection
       :after evil
       :ensure t
       :config
       (evil-collection-init))

     ;; Prefer to use 'kj' to go back to normal mode
     (use-package evil-escape
       :config
       (evil-escape-mode)
       (setq-default evil-escape-key-sequence "kj"))
   #+end_src

** org
   #+begin_src emacs-lisp
     (use-package org
       ;; :bind
       ;; (:map org-agenda-mode-map
       ;; 	("j" . org-agenda-next-line)
       ;; 	("k" . org-agenda-previous-line))
       :config
       (setq org-agenda-files (directory-files "~/syncthing/orgfiles" 1 "org$"))
       (setq org-log-done "time")
       (setq org-todo-keywords '((sequence "TODO(t)" "CONT(c)" "WAIT(w)" "|" "DONE(d)" "ABORTED(a)")))
       (setq org-log-note-headings '((done . "CLOSING NOTE %t")
     				(state . "State %-12s from %-12S %t")
     				;; (note . "Note taken on %t")
     				(note . "%d")
     				(reschedule . "Rescheduled from %S on %t")
     				(delschedule . "Not scheduled, was %S on %t")
     				(redeadline . "New deadline from %S on %t")
     				(deldeadline . "Removed deadline, was %S on %t")
     				(refile . "Refiled on %t")
     				(clock-out . ""))))
     (define-key evil-motion-state-map (kbd "SPC o a") 'org-agenda)
     (define-key evil-motion-state-map (kbd "SPC o i") 'org-indent-mode)
     (define-key evil-motion-state-map (kbd "SPC o c") 'org-toggle-checkbox)
     (define-key evil-motion-state-map (kbd "SPC o s") 'org-save-all-org-buffers)
     (define-key evil-motion-state-map (kbd "SPC n s") 'org-narrow-to-subtree)
     (define-key evil-motion-state-map (kbd "SPC n w") 'widen)
     (eval-after-load "org-agenda"
       '(progn
          (define-key org-agenda-mode-map "j" 'org-agenda-next-line)
          (define-key org-agenda-mode-map "k" 'org-agenda-previous-line)))
   #+end_src

** vertico (minibuffer)

   #+begin_src emacs-lisp
     (use-package vertico
       :init
       (vertico-mode)
       :config
       (keymap-set vertico-map "C-f" #'vertico-scroll-up)
       (keymap-set vertico-map "C-b" #'vertico-scroll-down)
       (setq vertico-cycle t))
   #+end_src

** marginali (minibuffer)

   #+begin_src emacs-lisp
     (use-package marginalia
       :init
       (marginalia-mode))
   #+end_src

** corfu (completion)

   #+begin_src emacs-lisp
     (use-package corfu
       ;; Optional customizations
       :custom
       (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
       (corfu-auto nil)               ;; Disable auto completion because typing fast seems to collide with that
                                      ;; because sometimes the whole file get manipulated?!?!
       (corfu-auto-prefix 1)
       (corfu-auto-delay 0.3)
       :hook (eshell-mode . (lambda ()
     			 (keymap-set corfu-map "RET" #'corfu-send)))
       :bind (:map corfu-map
     	      ("รถ" . corfu-insert-separator))
       :init
       (global-corfu-mode))

     (use-package corfu-terminal
       :unless (display-graphic-p)
       :config
       (corfu-terminal-mode +1))

     (use-package emacs
       :custom
       ;; TAB cycle if there are only few candidates
       ;; (completion-cycle-threshold 3)
       ;; Enable indentation+completion using the TAB key.
       ;; `completion-at-point' is often bound to M-TAB.
       (tab-always-indent 'complete)

       ;; ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
       ;; ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
       ;; ;; setting is useful beyond Corfu.
       (read-extended-command-predicate #'command-completion-default-include-p))
   #+end_src
** orderless (filter results)

   #+begin_src emacs-lisp
     (use-package orderless
       :custom
       (completion-styles '(orderless basic)))
   #+end_src
** consult (preview buffer, search, ...)

   #+begin_src emacs-lisp
     (use-package consult
       :bind (("C-s" . consult-line) ;; search
	      ("C-x b" . consult-buffer)))
   #+end_src

** ivy (deactivated use vertico, marginalia, orderless and consult)

# Improve search functionalities in buffers
#    #+begin_src emacs-lisp
#      (use-package swiper
#        :bind 
#        ("C-s" . swiper))
#    #+end_src

# Fuzzy search for commands and files in minibuffer
#    #+begin_src emacs-lisp
#      (use-package ivy
#        :config
#        (setq ivy-count-format "(%d/%d)")
#        (ivy-mode 1))
#    #+End_src

# provides enhanced versions of common emacs commands
#    #+begin_src emacs-lisp
#      (use-package counsel
#        :bind (
# 	      ("M-x" . counsel-M-x)
# 	      ("C-h f" . counsel-describe-function)
# 	      ("C-h v" . counsel-describe-variable)))
#    #+End_src
   
# Shows shortcuts behind commands and additional
# descriptive text in minibuffer
#    #+begin_src emacs-lisp
#      (use-package ivy-rich
#        :init
#        (ivy-rich-mode 1))
#    #+End_src
** which-key (minibuffer incomplete commands)

Shows which keys are possible for incomplete entered
commands
   #+begin_src emacs-lisp
     (use-package which-key
       :config
       (which-key-mode))
   #+end_src

** rainbow-delimiters (deactivated)

# Coloring of parentheses, brackets and braces for different
# depth levels.
#    #+begin_src emacs-lisp
#      (use-package rainbow-delimiters
#        :hook (prog-mode . rainbow-delimiters-mode))
#    #+end_src

** helpful (more elisp help information)

   #+begin_src emacs-lisp
     (use-package helpful
       :custom (counsel-describe-function-function #'helpful-callable)
       :bind ([remap describe-function] . #'helpful-callable))
   #+end_src
   
** projectile (Group buffer, files by project)

Keeps track of projects and its files and provide functionalities
like searching through all files.
   #+begin_src emacs-lisp
     (use-package projectile
       :config (projectile-mode))
     (define-key evil-motion-state-map (kbd "SPC p") 'projectile-command-map)
     ;; need to define keybinding for consult after the projectile commands
     ;; because SPC p is already referring to projectile-command-map
     (define-key evil-motion-state-map (kbd "SPC p s r") 'consult-ripgrep)
   #+end_src


# provides enhanced versions of common projectile commands like
# "jump to file"
#    #+begin_src emacs-lisp
#      (use-package counsel-projectile
#        :config (counsel-projectile-mode))
#    #+end_src

** git
*** magit (client)
   #+begin_src emacs-lisp
     (use-package magit)
     (define-key evil-motion-state-map (kbd "SPC g g") 'magit-status)
   #+end_src
*** diff-hl

Highlights which part differ from HEAD.

   #+begin_src emacs-lisp
     (use-package diff-hl
       :config (global-diff-hl-mode))
   #+end_src
  
*** commit-messages

Allows to show the commit-message corresponding to the
line the cursor is in as a popup and also show the
parent-commits from there on.

   #+begin_src emacs-lisp
     (use-package git-messenger
       :config (setq git-messenger:show-detail t))
   #+end_src

** lsp (ide-functionality)

Language server protocol client allows to connect to 
various language servers for instance for python or R.
   #+begin_src emacs-lisp
     (use-package lsp-mode
       ;; code also comes from https://github.com/minad/corfu/wiki#basic-example-configuration-with-orderless
       :custom
       (lsp-completion-provider :none) ;; we use Corfu!
       :init
       (setq lsp-keymap-prefix "C-c l")
       (setq xref-auto-jump-to-first-definition nil) ;; necessary in older emacs for "find-definition"-functionality
       (defun my/lsp-mode-setup-completion ()
	 (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
	       '(orderless))) ;; Configure orderless
       :hook
       (lsp-completion-mode . my/lsp-mode-setup-completion)
       :config
       (lsp-enable-which-key-integration t)
       (setq read-process-output-max (* 2 1024 1024))
       (setq gc-cons-threshold (* 2 800000))
       (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\venv\\'")
       (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.venv\\'")
       (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.cache\\'")
       (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.poetry\\'")
       (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.metaflow\\'")
       (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.local\\'"))

     (define-key evil-motion-state-map (kbd "SPC l d") 'lsp-describe-thing-at-point)
     (define-key evil-motion-state-map (kbd "SPC l r") 'lsp-rename)
     (define-key evil-motion-state-map (kbd "SPC l f") 'lsp-find-definition)
     (define-key evil-motion-state-map (kbd "SPC l c") 'comment-or-uncomment-region)

     ;; Enables "pop-up's" with additional information about
     ;; the current symbol or documentation for functions, etc.
     (use-package lsp-ui
       :hook (lsp-mode . lsp-ui-mode))

     (use-package lsp-pyright
       :ensure t
       :hook (python-mode . (lambda ()
			      (require 'lsp-pyright)
			      (lsp))))  ; or lsp-deferred
   #+end_src

** flycheck (deactivated)

# Online linting of source code
#    #+begin_src emacs-lisp
#      (use-package flycheck)
#    #+end_src

Text completion 
# ** company-mode (deactivated use vertico and orderless)
#    #+begin_src emacs-lisp
#         (use-package company
#           :after lsp-mode
#           :hook (lsp-mode . company-mode)
#           :custom
#           (company-minimum-prefix-length 1)
#           (company-show-numbers t)
#           (company-frontends '(company-pseudo-tooltip-frontend company-preview-frontend))
#           (company-idle-delay 0.0))
#    #+end_src

** prescient (deactivated)

# Sorts commands based on frequence of usage
#    #+begin_src emacs-lisp
#      (use-package ivy-prescient
#        :after counsel
#        :config (ivy-prescient-mode))
#    #+end_src

** ace-jump

Jump around by specifying a sequence of chars (avy) or
first char of a word (ace-jump)
   #+begin_src emacs-lisp
     (use-package ace-jump-mode
       :config
       (define-key evil-motion-state-map (kbd "SPC s") 'ace-jump-word-mode))
   #+end_src

** winner (deactivated)

# Switch through layouts from the history
#    #+begin_src emacs-lisp
#      (use-package winner
#        :config (winner-mode)
#        :bind (
# 	      :map evil-window-map
# 	      ("p" . winner-undo)
# 	      ("n" . winner-redo)))
#    #+end_src

** yasnippet (deactivated)

# Provides snippet functionality
#    #+begin_src emacs-lisp
#      (use-package yasnippet
#        :config
#        (yas-reload-all)
#        :hook
#        (python-mode . yas-minor-mode)
#        (ess-mode . yas-minor-mode)
#        (org-mode . yas-minor-mode))
#    #+end_src


# Various snippets
#    #+begin_src emacs-lisp
#      (use-package yasnippet-snippets)
#    #+end_src
** symon (deactivated)

# Systemmonitor in the minibuffer

#    #+begin_src emacs-lisp
#      (use-package symon
#        :config
#        (setq symon-delay 5)
#        (symon-mode))
#    #+end_src

** beacon

Cursor highlighting after switch windows

   #+begin_src emacs-lisp
     (use-package beacon
       :config
       (beacon-mode 1)
       (setq beacon-blink-duration 2))
   #+end_src

** indent-guide

Provides vertical lines from the beginning to the end
of a 'indentation-level' the cursor is in.

   #+begin_src emacs-lisp
     (use-package indent-guide
       :config (indent-guide-global-mode))
   #+end_src

** docker (deactivated)
   # #+begin_src emacs-lisp
   #   (use-package docker
   #     :ensure t
   #     :bind ("C-c d" . docker)
   #     :config (setq docker-run-as-root t))
   # #+end_src

** format-all (deactivated)
   
#    #+begin_src emacs-lisp
#      (use-package format-all
#        :config (add-hook 'prog-mode-hook 'format-all-mode))
#    #+end_src
** anzu (deactivated)

# Visible query-replace
#    #+begin_src emacs-lisp
#      (use-package anzu
#        :config (global-anzu-mode +1))
#    #+end_src
** yaml
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :config (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
   #+end_src
** denote

   #+begin_src emacs-lisp
     (use-package denote
       :config
       (setq denote-journal-extras-title-format 'year-month-day)
       (setq denote-directory "~/syncthing/orgfiles"))
   #+end_src
** goto-last-change

   #+begin_src emacs-lisp
     (use-package goto-last-change)
   #+end_src

** gptel

   #+begin_src emacs-lisp
     (use-package gptel
       :config
       ;; (setq gptel--debug t)
       ;; (setq gptel-log-level 'debug)
       (setq gptel-temperature 0.0)
       (global-set-key (kbd "C-c <RET>") 'gptel-send)
       (gptel-make-ollama "Ollama0"
         :host "ollama:11434"
         :stream t
         :models '(gemma3:4b))
       (gptel-make-ollama "Ollama1"
         :host "ollama:11434"
         :stream t
         :models '(cogito:8b))
       (setq
        gptel-model 'codellama:7b
        gptel-backend (gptel-make-ollama "Ollama2"
     		   :host "localhost:11434"
     		   :stream t
     		   :models '(codellama:7b))))
   #+end_src

** llm-functions
   #+begin_src emacs-lisp
     (defun ollama-only-code-curl-to-buffer (text)
       "Send TEXT to a buffer with the name BUFFER-NAME."
       (let ((curl-command (format "curl -s -X POST http://ollama:11434/api/generate -d '{ \"model\": \"codellama:7b\",\"prompt\": \"%s. only code\", \"stream\": false }' " (replace-regexp-in-string "\n" " " text))))
         (with-current-buffer (get-buffer-create "curl-llm-out")
           (erase-buffer)
           (insert (shell-command-to-string curl-command)))))

     (defun extract-json-response ()
       "Extract the 'response' field from a JSON buffer and save it to a new buffer."
       (with-current-buffer  (get-buffer "curl-llm-out")
         (let* ((json-string (buffer-string))
     	   (json-data (json-read-from-string json-string))
     	   (response (cdr (assoc 'response json-data))))
           (concat "\n---------------------llm-start---------------------\n" response "\n---------------------llm-end---------------------\n")
           )))

     (defun llm-minibuffer (text)
       (interactive "sOllama: ")
       (ollama-only-code-curl-to-buffer text)
       (let ((response (extract-json-response)))
         (insert response))
       )

     (defun llm-only-code ()
       "Returns the text selected by a region."
       (interactive)
       (let ((region (buffer-substring (region-beginning) (region-end))))
         (llm-minibuffer region)))
   #+end_src
** undo-tree

   #+begin_src emacs-lisp
     (use-package undo-tree
       :config
       (global-undo-tree-mode)
       (setq undo-tree-auto-save-history nil))
   #+end_src

** expand-region

   #+begin_src emacs-lisp
     (use-package expand-region)
     (define-key evil-motion-state-map (kbd "e") 'er/expand-region)
   #+end_src

** embark

   #+begin_src emacs-lisp
     (use-package embark
       :bind(:map minibuffer-local-map
     	     ("C-c C-c" . embark-collect)))
     (use-package embark-consult)
   #+end_src

** evil-snipe

   #+begin_src emacs-lisp
     (use-package evil-snipe
       :config (evil-snipe-mode))
   #+end_src

** evil-visualstar

   #+begin_src emacs-lisp
     (use-package evil-visualstar
       :config
       (global-evil-visualstar-mode)
       (setq evil-visualstar/persistent 1))
   #+end_src

* own packages
** time table
#+begin_src emacs-lisp

  (use-package time-table
    :straight (time-table :type git :host github :repo "MarselScheer/time-table" :branch "time-table-buffer")
    :custom
    (time-table-work-hours 0)
    (time-table-file "~/syncthing/orgfiles/tracked-times")
    (time-table-project-names '("book" "kg" "time-table" "emacs" "backup" "end"))
    (time-table-task-names '("code" "tex" "math" "end")))
  (define-key evil-motion-state-map (kbd "SPC t t") 'time-table-track)
  (define-key evil-motion-state-map (kbd "SPC t s") 'time-table-status)
  (define-key evil-motion-state-map (kbd "SPC t S") 'time-table-summarize-projects-last-7-days)
  (define-key evil-motion-state-map (kbd "SPC t b") 'time-table-find-tracking-file)
  (define-key evil-motion-state-map (kbd "SPC t e") 'time-table-end-tracking)
#+end_src
* languages
** debugging (deactivated)
   # #+begin_src emacs-lisp
   #   (use-package dap-mode
   #     :config
   #     (setq dap-auto-configure-features '(sessions locals expressions repl))
   #     (dap-auto-configure-mode))
   # #+end_src

** dockerfiles (deactivated)
   # #+begin_src emacs-lisp
   #   (use-package dockerfile-mode
   #     :config
   #     (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
   # #+end_src
   
** python
   # #+begin_src emacs-lisp
   #   (defun ms/py-execute-buffer ()
   #     "Saves projects and sends buffer"
   #     (interactive)
   #     (when (get-buffer "*Python*")
   #       (let ((kill-buffer-query-functions nil))
   #         (kill-buffer "*Python*")))
   #     (projectile-save-project-buffers)
   #     (py-execute-buffer)
   #     (let ((my-window (get-buffer-window)))
   #       (ivy--switch-buffer-other-window-action "*Python*")
   #       (select-window my-window)))

   #   (defun ms/py-execute-class ()
   #     "Saves projects and sends class"
   #     (interactive)
   #     (projectile-save-project-buffers)
   #     (py-execute-class))

   #   (defun ms/py-execute-region (beg end)
   #     "Saves projects and sends region"
   #     (interactive "r")
   #     (projectile-save-project-buffers)
   #     (py-execute-region beg end))
   # #+end_src
   #+begin_src emacs-lisp
     (use-package python-black
       :hook (python-mode . python-black-on-save-mode))
   #+end_src

   #+begin_src emacs-lisp
     (use-package python-mode
       :hook (python-mode . lsp-deferred))
       ;; :config
       ;; ;; (require 'dap-python)
       ;; (evil-define-key 'normal 'python-mode-map (kbd "SPC r i") 'py-switch-to-shell)
       ;; ;; (evil-define-key 'normal 'python-mode-map (kbd "SPC r b") 'ms/py-execute-buffer)
       ;; ;; (evil-define-key 'normal 'python-mode-map (kbd "SPC r c") 'ms/py-execute-class)
       ;; ;; (evil-define-key 'normal 'python-mode-map (kbd "SPC r r") 'ms/py-execute-region)
       ;; (setq py-split-window-on-execute nil))
       ;; ;; (setq dap-python-debugger 'debugpy)
     ;; (define-key python-mode-map (kbd "TAB") 'completion-at-point)
   #+end_src

** R (deactivated)
*** ess
   # #+begin_src emacs-lisp
   #   (defun show-R-buffer ()
   #     (switch-to-buffer-other-window
   # 	(buffer-name
   # 	 (car
   # 	  (seq-filter
   # 	   (lambda (b) (string-prefix-p "*R:" (buffer-name b)))
   # 	   (buffer-list)))))
   #     (switch-to-buffer-other-window (other-buffer (current-buffer) 1)))

   #   (defun ess-pkgdown-site ()
   #     "Interface to tinytest"
   #     (interactive)
   #     (projectile-save-project-buffers)
   #     (ess-eval-linewise
   # 	"roxygen2::roxygenize(); options(pkgdown.internet = FALSE); pkgdown::build_site(preview = FALSE)"
   # 	"Build pkgdown site"))

   #   (defun ess-pkgdown-articles ()
   #     "Interface to tinytest"
   #     (interactive)
   #     (projectile-save-project-buffers)
   #     (ess-eval-linewise
   # 	"roxygen2::roxygenize(); options(pkgdown.internet = FALSE); pkgdown::build_articles(preview = FALSE)"
   # 	"Build pkgdown articles"))

   #   (setq ms/default-test-file nil)
   #   (setq ms/default-test-dir nil)

   #   (defun ess-r-tinytest-file (file)
   #     "Interface to tinytest"
   #     (interactive (list (read-file-name "Select test file:" ms/default-test-dir nil nil ms/default-test-file)))
   #     (setq ms/default-test-dir (concat (f-dirname file) "/"))
   #     (setq ms/default-test-file (f-filename file))
   #     (projectile-save-project-buffers)
   #     (ess-r-package-eval-linewise
   # 	(format "pkgload::load_all(); tinytest::run_test_file('%s')" file)
   # 	"Load package. Run test file"))

   #   (defun ess-r-tinytest ()
   #     "Interface to tinytest"
   #     (interactive)
   #     (projectile-save-project-buffers)
   #     (ess-r-package-eval-linewise
   # 	"pkgload::load_all(); tinytest::test_all()"
   # 	"Load package. Test with tinytest"))

   #   (defun ess-print-at-point ()
   #     "print of whats at point"
   #     (interactive)
   #     (let ((target (thing-at-point 'symbol)))
   # 	 (ess-eval-linewise
   # 	  (format "%s" target)
   # 	  (format "Print instance: %s" target)))
   #     (show-R-buffer))

   #   (defun ess-head-at-point ()
   #     "prints head of whats at point"
   #     (interactive)
   #     (let ((target (thing-at-point 'symbol)))
   # 	 (ess-eval-linewise
   # 	  (format "head(%s)" target)
   # 	  (format "Head of instance: %s" target)))
   #     (show-R-buffer))

   #   (defun ess-tail-at-point ()
   #     "prints tail of whats at point"
   #     (interactive)
   #     (let ((target (thing-at-point 'symbol)))
   # 	 (ess-eval-linewise
   # 	  (format "tail(%s)" target)
   # 	  (format "Tail of instance: %s" target))))

   #   (defun drake-load-at-point ()
   #     "load drake-target at point"
   #     (interactive)
   #     (let ((target (thing-at-point 'symbol)))
   # 	 (ess-eval-linewise
   # 	  (format "drake::loadd(%s)" target)
   # 	  (format "Load target: %s" target)))
   #     (show-R-buffer))

   #   (defun drake-load-at-point-and-print ()
   #     "load drake-target at point and print"
   #     (interactive)
   #     (drake-load-at-point)
   #     (ess-print-at-point)
   #     (show-R-buffer))

   #   (defun drake-load-at-point-and-head ()
   #     "load drake-target at point and print head"
   #     (interactive)
   #     (drake-load-at-point)
   #     (ess-head-at-point)
   #     (show-R-buffer))

   #   (defun drake-prep-run ()
   #     "prep drake run"
   #     (interactive)
   #     (projectile-save-project-buffers)
   #     (ess-eval-linewise
   # 	"source('prep_drake_run.R')"
   # 	"Prepare next drake run")
   #     (show-R-buffer))

   #   (defun drake-exec-run ()
   #     "execute drake run"
   #     (interactive)
   #     (projectile-save-project-buffers)
   #     (ess-eval-linewise
   # 	"execute_plans(confirm = FALSE)"
   # 	"Execute drake run")
   #     (show-R-buffer))
   # #+end_src

   # #+begin_src emacs-lisp
   #   (use-package ess
   #     :hook (ess-mode . lsp-deferred)
   #     :config
   #     (setq-default ess-style 'RStudio-)
   #     (evil-define-key 'insert 'ess-r-mode-map (kbd "C-p") 'company-manual-begin)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC d p") 'drake-prep-run)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC d r") 'drake-exec-run)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC d l") 'drake-load-at-point)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC r d a") 'ess-pkgdown-articles)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC r d s") 'ess-pkgdown-site)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC r b") 'ess-eval-buffer)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC r s") 'ess-eval-buffer-from-beg-to-here)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC r e") 'ess-eval-buffer-from-here-to-end)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC r r") 'ess-eval-region-or-function-or-paragraph)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC r k") 'ess-head-at-point)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC r j") 'ess-tail-at-point)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC r p") 'ess-print-at-point)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC r t") 'ess-r-tinytest-file)
   #     (evil-define-key 'normal 'ess-r-mode-map (kbd "SPC p P") 'ess-r-tinytest)
   #     (setq ess-eval-visibly 't))
   # #+end_src

*** poly-R-markdown

Polymode for working with Rmd-files

   # #+begin_src emacs-lisp
   #   (use-package poly-R
   #     :ensure t)
   # #+end_src

* General key bindings. Copied from https://github.com/emacs-evil/evil-collection
   #+begin_src emacs-lisp
     (defvar my-intercept-mode-map (make-sparse-keymap)
       "High precedence keymap.")

     (define-minor-mode my-intercept-mode
       "Global minor mode for higher precedence evil keybindings."
       :global t)

     (my-intercept-mode)

     (dolist (state '(normal visual insert))
       (evil-make-intercept-map
	;; NOTE: This requires an evil version from 2018-03-20 or later
	(evil-get-auxiliary-keymap my-intercept-mode-map state t t)
	state))

     (evil-define-key 'normal my-intercept-mode-map
       (kbd "SPC SPC") 'execute-extended-command)
     (evil-define-key 'normal my-intercept-mode-map
       (kbd "SPC b f") 'find-file)
     (evil-define-key 'normal my-intercept-mode-map
       (kbd "SPC b b") 'consult-buffer)
     (evil-define-key 'normal my-intercept-mode-map
       (kbd "SPC b k") 'kill-buffer)
     (evil-define-key 'normal my-intercept-mode-map
       (kbd "SPC b o") 'consult-buffer-other-window)
     (evil-define-key 'normal my-intercept-mode-map
       (kbd "SPC w") 'evil-window-map)
   #+end_src

* ui
** general
*** Remove various UI-elements
   #+begin_src emacs-lisp
     (setq inhibit-startup-screen t)
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (tooltip-mode -1)
   #+end_src

*** Show always end of compilation buffer or first error
   #+begin_src emacs-lisp
     (custom-set-variables
      ;; custom-set-variables was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(compilation-scroll-output 'first-error)
      '(warning-suppress-log-types '((native-compiler))))
   #+end_src

*** Add additional UI-info
   #+begin_src emacs-lisp
     (column-number-mode)
     (global-display-line-numbers-mode t)
     (setq display-line-numbers-type 'relative)
     (savehist-mode 1)
   #+end_src

** Compilation buffer
   #+begin_src emacs-lisp
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (ansi-color-apply-on-region compilation-filter-start (point-max)))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+end_src

** theme
   #+begin_src emacs-lisp
     (use-package doom-themes)
     (load-theme 'doom-dracula t)
     ;; (use-package cyberpunk-theme)
     ;; (load-theme 'cyberpunk t)
     ;; (consult-theme 'deeper-blue)
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(ivy-current-match ((t (:extend t :background "gray10" :foreground "yellow" :box nil :weight bold)))))
   #+end_src

   #+begin_src emacs-lisp
     ;; (use-package doom-modeline
     ;;  :init (doom-modeline-mode 0))
     (use-package telephone-line)
     (telephone-line-mode 1)
   #+end_src
   
